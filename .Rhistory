theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
result = list()
result = list()
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nréponse gauche",
paste0("50%\nvotre milieu\nsubjectif est de\n",
round(pse,1), "mm"),
"100%\nréponse droite"))+
labs(y="% de réponse 'ligne coupée à droite'", x= "Décalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
result[[i]]<- c(pse, slope, jnd)
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
result
as.data.frame(c(pse, slope, jnd))
as.data.frame(pse, slope, jnd)
as.matrix(pse, slope, jnd)
as.matrix(c(pse, slope, jnd))
((as.matrix(c(pse, slope, jnd)))
result[[i]]<-
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
result
as.matrix(c(pse, slope, jnd))
as.matrix(c(pse, slope, jnd)) %>% t
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat
mat<-as.data.frame(mat)
mat
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nréponse gauche",
paste0("50%\nvotre milieu\nsubjectif est de\n",
round(pse,1), "mm"),
"100%\nréponse droite"))+
labs(y="% de réponse 'ligne coupée à droite'", x= "Décalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
bind.rows(result)
bind_rows(result)
df<-bind_rows(result)
t.test(pse ~0, df)
?t.test
t.test(pse ~ 1, df)
mean(df$pse)
t.test(pse ~ 1, df)
library(here)
library(tidyverse)
library(broom)
result = list()
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nréponse gauche",
paste0("50%\nvotre milieu\nsubjectif est de\n",
round(pse,1), "mm"),
"100%\nréponse droite"))+
labs(y="% de réponse 'ligne coupée à droite'", x= "Décalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
df<-bind_rows(result)
mean(df$pse)
t.test(pse ~ 1, df)
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nréponse gauche",
paste0("50%\nvotre milieu\nsubjectif est\ndécalé de\n",
round(pse,1), "mm"),
"100%\nréponse droite"))+
labs(y="% de réponse 'ligne coupée à droite'", x= "Décalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
library(here)
library(tidyverse)
library(broom)
result = list()
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nréponse gauche",
paste0("50%\nvotre milieu\nsubjectif est\ndécalé de\n",
round(pse,1), "mm"),
"100%\nréponse droite"))+
labs(y="% de réponse 'ligne coupée à droite'", x= "Décalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
df<-bind_rows(result)
mean(df$pse)
t.test(pse ~ 1, df)
library(pwr)
install.packages("pwr")
pwr.t.test(d=(0-0.5)/1,power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
library(pwr)
pwr.t.test(d=(0-0.5)/1,power=0.8,sig.level=0.05,type="paired",alternative="two.sided")
library(tidyverse)
seq(-10,10,1)
sapply(seq(-10,10,1), function(x),paste0("images/",x,".png"))
seq(-10,10,1)
sapply(seq(-10,10,1), function(x), paste0("images/",x,".png"))
i<-seq(-10,10,1)
i
sapply(i, function(x), paste0("images/",x,".png"))
sapply(i, paste0("images/",x,".png"))
sapply(i, function(x) paste0("images/",x,".png"))
i
easy<-c(seq(-10,-7,1), seq(7,10,1))
easy
medium<-c(seq(-6,-3,1), seq(3,6,1))
hard<-c(seq(-2,2,1))
hard
hard<-seq(-2,2,1)
hard
easy<-c(seq(-10,-7,1), seq(7,10,1)) %>% rep(., each = 2)
easy
medium<-c(seq(-6,-3,1), seq(3,6,1)) %>% rep(., each = 4)
c(seq(-2,2,1),0)
hard<-c(seq(-2,2,1),0) %>% rep(., each = 6)
hard
stim<-c(easy, medium, hard)
stim
sapply(stim, function(x) paste0("images/",x,".png"))
images<-sapply(stim, function(x) paste0("images/",x,".png"))
images<-as.data.frame(sapply(stim, function(x) paste0("images/",x,".png")))
images
images<-as.data.frame(sapply(stim, function(x) paste0("images/",x,".png")), stim)
stim
sapply(stim, function(x) paste0("images/",x,".png"))
stim
images<-as.data.frame(c(sapply(stim, function(x) paste0("images/",x,".png")), stim))
images
images<-as.data.frame(x = sapply(stim, function(x) paste0("images/",x,".png")), y=stim)
images
as.data.frame(x = sapply(stim, function(x) paste0("images/",x,".png")),
y=stim)
matrix(x = sapply(stim, function(x) paste0("images/",x,".png")),
y=stim)
matrix(sapply(stim, function(x) paste0("images/",x,".png")),
stim)
matrix(sapply(stim, function(x) paste0("images/",x,".png")))
stim
matrix(sapply(stim, function(x) paste0("images/",x,".png")),
stim)
matrix(sapply(stim, function(x) paste0("images/",x,".png")),
stim,
ncol = 2)
images<-matrix(sapply(stim, function(x) paste0("images/",x,".png")))
images
images<-as.data.frame(sapply(stim, function(x) paste0("images/",x,".png")))
images
images$offset<-stim
images
colnames(images)<-c("line_file", "offset")
write.csv(images, file = "conditions")
here::here
here::here()
write.csv(images, file = "conditions.xlsx")
write.csv(images, file = "conditions.csv")
write.csv(images, file = "conditions.csv", quote = F)
write.csv(images, file = "conditions.csv", quote = F)
write.csv(images, file = "conditions.csv", quote = F,
row.names = F)
library("random")
set.seed(1554)
images_random <- sample(images)
images_random
images_random <- images[sample(nrow(images)),]
images_random
read.csv(here::here("random.csv"))
as.vector(read.csv(here::here("random.csv")))
random<-as.vector(read.csv(here::here("random.csv")))
str(random)
random<-read.csv(here::here("random.csv"))
install.packages("random")
random::randomSequence(min =1, max = 84)
order<-random::randomSequence(min =1, max = 84)
images[match(order,images$offset),]
order
images$offset
images[c(order),]
order<-random::randomSequence(min =1, max = 84)
images_random <- images[c(order),]
images_random
write.csv(images_random, file = "conditions.csv", quote = F,
row.names = F)
images_random_training <- images_random[sample(nrow(images_random), 15),]
images_random_training
write.csv(images_random, file = "conditions.csv", quote = F,
row.names = F)
write.csv(images_random_training, file = "conditions_training.csv", quote = F,
row.names = F)
library(here)
library(tidyverse)
library(broom)
result = list()
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nr?ponse gauche",
paste0("50%\nvotre milieu\nsubjectif est\nd?cal? de\n",
round(pse,1), "mm"),
"100%\nr?ponse droite"))+
labs(y="% de r?ponse 'ligne coup?e ? droite'", x= "D?calage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nreponse gauche",
paste0("50%\nvotre milieu\nsubjectif est\ndecalee de\n",
round(pse,1), "mm"),
"100%\nr?ponse droite"))+
labs(y="% de reponse 'ligne coupee a droite'", x= "Decalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
library(here)
library(tidyverse)
library(broom)
result = list()
for(i in list.files(path = here::here("data"))) {
d<-read.csv(here::here("data", i), header=T)
d<-d[-seq(1:21),] %>%
select(offset, resp.keys) %>%
#90 trials
mutate(bias = ifelse(resp.keys == "e",0,1))
mod<-glm(bias ~ offset, family = binomial(link = "logit"), data = d)
sum<-summary(mod)
coeff<-t(as.matrix(sum$coefficients[, "Estimate"]))
colnames(coeff)<-c("intercept", "offset")
coeff<-as.data.frame(coeff)
pse <- -coeff$intercept/coeff$offset
slope <- coeff$offset
jnd <- log(3/slope)
p<-ggplot(d)+
aes(x = offset, y = bias)+
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0.50, lty = "dashed", col = "blue", size=1)+
geom_vline(xintercept = pse, lty = "dashed", col = "blue", size=1)+
scale_x_continuous(limits=c(-10.5,10.5),breaks = seq(-10,10,1))+
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = F, size=2)+
geom_jitter(size = 3, alpha = 0.7, width = 0.2,height=0.02, col = "black",fill="red",
stroke = 1.2, shape = 21)+
geom_point(aes(x=pse, y=0.5), fill="red", size=5, col = "black", shape=24,
stroke = 1.5)+
scale_y_continuous(limits=c(-0.1,1.1),breaks = seq(0,1,0.5),
labels = c("0%\nreponse gauche",
paste0("50%\nvotre milieu\nsubjectif est\ndecalee de\n",
round(pse,1), "mm"),
"100%\nr?ponse droite"))+
labs(y="% de reponse 'ligne coupee a droite'", x= "Decalage de la ligne verticale \npar rapport au milieu (mm)")+
theme_bw(base_size = 16)
name_subject<-substr(i, start = 1, stop = 8)
mat<-as.matrix(c(pse, slope, jnd)) %>% t
colnames(mat)<-c("pse", "slope", "jnd")
mat<-as.data.frame(mat)
result[[i]]<- mat
png(filename = paste0("plot",name_subject,".png"))
print({
p
})
dev.off()
}
qt(1 - 0.05 / (2*n), (n - 4))
